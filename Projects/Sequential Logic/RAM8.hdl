// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
    ------------------------------------
    if(load == 1)
        Register[Address] = in
        out = Register[address]
    else
        don't change any register values and keep it as it's
        out = Register[address]


    • the purpose of 'Load' :
        - load = 1 -> write to specific register
        - load = 0 -> read from the specific register
    
    • the reading behavoiur ins't rlated to clock pulse
    - it just read the value already stored in the Register

    • the writing behaviour is related to the clock pusle
    - as explained in the Register implementation comments
 */

 /*
    implementation :
    • Dmux 1*8 : to select which register to load the input based on the address
    • 16-bit 8 register : used to store the data
    • 16-bit Mux 16*1 : used to decide which register is choosed based on the address
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux8Way(in=load , sel=address , a=a , b=b , c=c , d=d , e=e , f=f , g=g , h=h );

    Register(in=in , load=a , out=out1);
    Register(in=in , load=b , out=out2);
    Register(in=in , load=c , out=out3);
    Register(in=in , load=d , out=out4);

    Register(in=in , load=e , out=out5);
    Register(in=in , load=f , out=out6);
    Register(in=in , load=g , out=out7);
    Register(in=in , load=h , out=out8);

    Mux8Way16(a=out1 , b=out2 , c=out3 , d=out4 , e=out5 , f=out6 , g=out7 , h=out8 , sel=address , out=out );
}