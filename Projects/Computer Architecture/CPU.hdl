// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	

    Or(a=zr,b=ng,out=notpos);
    Not(in=notpos,out=pos);

    And(a=instruction[0],b=pos,out=j3);//j3
    And(a=instruction[1],b=zr,out=j2);//j2
    And(a=instruction[2],b=ng,out=j1);//j1

    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);

    And(a=j123,b=instruction[15],out=PCLoad);

    PC(in=ARegisterOutput , load=PCLoad , inc=true , reset=reset , out[0..14]=pc );

    // start
    Not(in=instruction[15] , out=notOpCode );
    Mux16(a=ALUOutput , b=instruction , sel=notOpCode , out=ARegisterInput);

    Or(a=notOpCode , b=instruction[5] , out=ARegisterLoad );
    ARegister(in=ARegisterInput , load=ARegisterLoad , out[0..14]=addressM , out=ARegisterOutput );

    Mux16(a=ARegisterOutput , b=inM , sel=instruction[12] , out=ARegisterOutputOrInM );

    And(a=instruction[15] , b=instruction[4] , out=DRegisterLoad );
    DRegister(in=ALUOutput , load=DRegisterLoad , out=DRegisterOutput );

    ALU
    (
        x=DRegisterOutput , y=ARegisterOutputOrInM , 
        zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , 
        ny=instruction[8] , f=instruction[7] , no=instruction[6] , 
        out=ALUOutput, out=outM , zr=zr , ng=ng 
    );
    
    And(a=instruction[15] , b=instruction[3] , out=writeM );
}