// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/DMux4Way.hdl
/**
 * 4-way demultiplexor:
 * [a, b, c, d] = [in, 0, 0, 0] if sel = 00
 *                [0, in, 0, 0] if sel = 01
 *                [0, 0, in, 0] if sel = 10
 *                [0, 0, 0, in] if sel = 11
 */
/*
    a = in.s1`.s2`
    b = in.s1.s2`
    - so now i can use the output of the normal DMux that implemented before 
    - and then use the And gate with the "s2`"

    c = in.s1`.s2
    d = in.s1.s2
    - same logic will be used here 
*/
CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    DMux(in=in,sel=sel[0],a=tmpA,b=tmpB);
    DMux(in=in,sel=sel[0],a=tmpC,b=tmpD);

    Not(in=sel[1],out=notS2);

    And(a=tmpA,b=notS2,out=a);
    And(a=tmpB,b=notS2,out=b);

    And(a=tmpC,b=sel[1],out=c);
    And(a=tmpD,b=sel[1],out=d);
}